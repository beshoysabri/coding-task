#!/usr/bin/env python3
"""
Generate PDF Report from Battery Data Visualizations

This script takes the visualization charts generated by generate_charts.py
and compiles them into a professional PDF report with explanations.
"""

import os
import sys
import glob
import logging
import datetime
from fpdf import FPDF
import pandas as pd
import matplotlib.pyplot as plt
from PIL import Image

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler(sys.stdout)]
)
logger = logging.getLogger(__name__)

class PDFReport(FPDF):
    """Custom PDF class for Battery Data Report."""
    
    def __init__(self, title="Battery Data Analysis Report"):
        super().__init__()
        self.title = title
        # Set up PDF properties
        self.set_author("Battery Data Pipeline")
        self.set_creator("Battery Data Pipeline")
        self.set_title(title)
        
        # Set margins
        self.set_margins(left=15, top=20, right=15)
        
        # Enable auto page break with a margin
        self.set_auto_page_break(auto=True, margin=15)
        
        # Initialize counters and trackers
        self.page_count = 0
        self.chapter_count = 0
        self.charts_added = 0
    
    def header(self):
        """Add custom header to each page."""
        self.page_count += 1
        
        # Set font for header
        self.set_font('Arial', 'B', 10)
        
        # Add logo or title
        self.cell(0, 10, self.title, 0, 0, 'L')
        
        # Add page number
        self.cell(0, 10, f'Page {self.page_count}', 0, 0, 'R')
        
        # Add a line
        self.line(10, 20, 200, 20)
        
        # Move below the line
        self.ln(15)
    
    def footer(self):
        """Add custom footer to each page."""
        # Position at 1.5 cm from bottom
        self.set_y(-15)
        
        # Set font for footer
        self.set_font('Arial', 'I', 8)
        
        # Add date and time
        current_time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        self.cell(0, 10, f'Generated on {current_time}', 0, 0, 'L')
        
        # Add company name or other info
        self.cell(0, 10, 'Battery Data Pipeline', 0, 0, 'R')
    
    def chapter_title(self, title):
        """Add a chapter title."""
        self.chapter_count += 1
        
        # Set font for chapter title
        self.set_font('Arial', 'B', 16)
        
        # Add chapter number and title
        self.cell(0, 10, f'{self.chapter_count}. {title}', 0, 1, 'L')
        
        # Add some space after title
        self.ln(5)
    
    def chapter_body(self, txt):
        """Add chapter body text."""
        # Set font for chapter body
        self.set_font('Arial', '', 12)
        
        # Add multi-line text
        self.multi_cell(0, 10, txt)
        
        # Add some space after body
        self.ln(5)
    
    def add_chart(self, image_path, caption=None, width=180):
        """Add a chart image with caption."""
        if not os.path.exists(image_path):
            logger.warning(f"Image not found: {image_path}")
            return False
        
        try:
            # Get the image dimensions
            img = Image.open(image_path)
            img_width, img_height = img.size
            
            # Calculate height based on aspect ratio and desired width
            height = width * img_height / img_width
            
            # Calculate total space needed for image and caption
            space_needed = height + (20 if caption else 0)  # Add extra space for caption
            
            # Check if we need a page break
            # Add more margin to ensure charts don't overflow
            if self.get_y() + space_needed > 240:  # Increased safety margin
                self.add_page()
            
            # Current Y position after potential page break
            y_position = self.get_y()
            
            # Add the image
            self.image(image_path, x=10, y=y_position, w=width, h=height)
            self.charts_added += 1
            
            # Move position to below the image
            self.set_y(y_position + height + 5)
            
            # Add caption if provided
            if caption:
                self.set_font('Arial', 'I', 10)
                self.multi_cell(0, 10, f'Figure {self.charts_added}: {caption}', 0, 'C')
                self.ln(5)
            
            # Add extra space after chart
            self.ln(5)
            
            return True
        
        except Exception as e:
            logger.error(f"Error adding chart {image_path}: {str(e)}")
            return False


class BatteryReportGenerator:
    """Generates a PDF report from battery data visualizations."""
    
    def __init__(self, charts_dir=None, output_file=None, data_file=None):
        """
        Initialize the report generator.
        
        Args:
            charts_dir (str): Directory containing chart PNG files
            output_file (str): Path to save the PDF report
            data_file (str): Path to the cleaned data CSV file
        """
        self.charts_dir = charts_dir or os.environ.get('CHARTS_DIR', 'analysis')
        self.output_file = output_file or os.environ.get('REPORT_FILE', 'analysis/battery_data_report.pdf')
        self.data_file = data_file or os.environ.get('DATA_FILE', 'data/cleaned_battery_data.csv')
        self.df = None
        self.chart_files = []
    
    def load_data(self):
        """Load the cleaned data CSV file to include statistics in the report."""
        if not os.path.exists(self.data_file):
            logger.warning(f"Data file not found: {self.data_file}")
            return False
        
        try:
            self.df = pd.read_csv(self.data_file)
            logger.info(f"Successfully loaded data from {self.data_file}")
            return True
        except Exception as e:
            logger.error(f"Error loading data: {str(e)}")
            return False
    
    def find_chart_files(self):
        """Find all PNG chart files in the charts directory."""
        if not os.path.exists(self.charts_dir):
            logger.error(f"Charts directory not found: {self.charts_dir}")
            return False
        
        # Get all PNG files
        self.chart_files = glob.glob(os.path.join(self.charts_dir, "*.png"))
        
        if not self.chart_files:
            logger.warning(f"No chart files found in {self.charts_dir}")
            return False
        
        logger.info(f"Found {len(self.chart_files)} chart files")
        return True
    
    def calculate_statistics(self):
        """Calculate key statistics from the data to include in the report."""
        stats = {}
        
        if self.df is None:
            logger.warning("No data loaded for statistics calculation")
            return stats
        
        try:
            # Basic data statistics
            stats['total_records'] = len(self.df)
            stats['unique_batteries'] = self.df['serial'].nunique() if 'serial' in self.df.columns else 0
            
            # Grid metrics statistics
            if 'grid_purchase' in self.df.columns:
                stats['total_grid_purchase'] = self.df['grid_purchase'].sum()
                stats['avg_grid_purchase'] = self.df['grid_purchase'].mean()
            
            if 'grid_feedin' in self.df.columns:
                stats['total_grid_feedin'] = self.df['grid_feedin'].sum()
                stats['avg_grid_feedin'] = self.df['grid_feedin'].mean()
                stats['non_zero_feedin'] = (self.df['grid_feedin'] > 0).sum()
            
            # Time-based statistics
            if 'timestamp' in self.df.columns and pd.api.types.is_datetime64_dtype(self.df['timestamp']):
                stats['start_date'] = self.df['timestamp'].min().strftime('%Y-%m-%d')
                stats['end_date'] = self.df['timestamp'].max().strftime('%Y-%m-%d')
                stats['date_range_days'] = (self.df['timestamp'].max() - self.df['timestamp'].min()).days + 1
            
            # Hour-based statistics
            if 'hour_of_day' in self.df.columns:
                hour_counts = self.df.groupby('hour_of_day').size()
                stats['busiest_hour'] = hour_counts.idxmax()
                stats['records_in_busiest_hour'] = hour_counts.max()
            
            logger.info(f"Calculated {len(stats)} statistics")
            return stats
        
        except Exception as e:
            logger.error(f"Error calculating statistics: {str(e)}")
            return stats
    
    def get_chart_descriptions(self):
        """Get descriptions for each chart based on filename."""
        descriptions = {
            'hourly_grid_activity.png': "Hourly Grid Activity showing average grid purchase and feed-in patterns throughout the day.",
            'total_grid_metrics_by_hour.png': "Total Grid Metrics aggregated by hour, showing the combined energy flow across all batteries.",
            'grid_metrics_distribution.png': "Distribution of Grid Metrics showing the statistical spread of purchase and feed-in values.",
            'battery_comparison.png': "Battery Comparison showing relative grid interaction across different battery units.",
            'grid_activity_heatmap.png': "Grid Activity Heatmap visualizing patterns across hours and batteries.",
            'grid_metrics_time_series.png': "Time Series of Grid Metrics showing purchase and feed-in trends over time.",
            'feedin_proportion.png': "Proportion of Grid Feed-in by Battery showing which units contribute most to feeding energy back to the grid."
        }
        
        captions = {}
        for chart_file in self.chart_files:
            basename = os.path.basename(chart_file)
            if basename in descriptions:
                captions[chart_file] = descriptions[basename]
            else:
                captions[chart_file] = f"Chart: {basename.replace('_', ' ').replace('.png', '')}"
        
        return captions
    
    def create_report(self):
        """Create a PDF report with all charts and explanations."""
        if not self.find_chart_files():
            return False
        
        self.load_data()
        stats = self.calculate_statistics()
        chart_descriptions = self.get_chart_descriptions()
        
        # Create PDF
        pdf = PDFReport("Battery Data Analysis Report")
        pdf.set_auto_page_break(True, margin=15)  # Enable auto page break
        pdf.add_page()
        
        # Executive Summary
        pdf.chapter_title("Executive Summary")
        
        summary_text = "This report presents an analysis of battery time series data, showcasing energy flow patterns between batteries and the grid. "
        
        if stats:
            if 'total_records' in stats:
                summary_text += f"The analysis covers {stats['total_records']} data points "
            if 'unique_batteries' in stats:
                summary_text += f"from {stats['unique_batteries']} unique battery units. "
            if 'date_range_days' in stats:
                summary_text += f"The data spans {stats['date_range_days']} days "
                if 'start_date' in stats and 'end_date' in stats:
                    summary_text += f"from {stats['start_date']} to {stats['end_date']}. "
            if 'total_grid_purchase' in stats and 'total_grid_feedin' in stats:
                summary_text += f"\n\nTotal energy purchased from the grid: {stats['total_grid_purchase']:.2f} units. "
                summary_text += f"Total energy fed back to the grid: {stats['total_grid_feedin']:.2f} units. "
            if 'non_zero_feedin' in stats:
                summary_text += f"\n\nThere were {stats['non_zero_feedin']} instances of batteries feeding energy back to the grid. "
        
        summary_text += "\n\nThe visualizations in this report highlight patterns in grid interaction, " + \
                       "including hourly trends, battery comparisons, and energy flow distributions."
        
        pdf.chapter_body(summary_text)
        
        # Key Findings
        pdf.chapter_title("Key Findings")
        
        findings_text = "- Grid purchase and feed-in patterns show distinct daily cycles.\n"
        findings_text += "- Batteries exhibit varying behaviors in terms of grid interaction.\n"
        findings_text += "- Some time periods show significantly higher grid feed-in activity.\n"
        
        if 'busiest_hour' in stats:
            findings_text += f"- Hour {stats['busiest_hour']} shows the highest activity with {stats['records_in_busiest_hour']} records.\n"
        
        pdf.chapter_body(findings_text)
        
        # Charts section
        pdf.add_page()  # Start charts on a new page
        pdf.chapter_title("Visualization Charts")
        
        pdf.chapter_body("The following charts visualize different aspects of the battery data, " + \
                        "focusing on grid interaction patterns and energy flow. Each chart provides " + \
                        "insights into specific dimensions of the battery system behavior.")
        
        # Organize charts in a meaningful order
        chart_order = [
            'hourly_grid_activity.png',
            'total_grid_metrics_by_hour.png',
            'grid_metrics_time_series.png',
            'grid_metrics_distribution.png',
            'battery_comparison.png',
            'feedin_proportion.png',
            'grid_activity_heatmap.png'
        ]
        
        # Add charts in the preferred order
        sorted_charts = []
        
        # First add charts in the preferred order
        for chart_name in chart_order:
            for chart_path in self.chart_files:
                if chart_path.endswith(chart_name):
                    sorted_charts.append(chart_path)
                    break
        
        # Then add any remaining charts
        for chart_path in self.chart_files:
            if chart_path not in sorted_charts:
                sorted_charts.append(chart_path)
        
        # Add all charts to the PDF - use a slightly smaller width for better fit
        chart_width = 170  # Reduced from 180
        for chart_path in sorted_charts:
            caption = chart_descriptions.get(chart_path, os.path.basename(chart_path))
            pdf.add_chart(chart_path, caption=caption, width=chart_width)
        
        # Methodology section - start on a new page
        pdf.add_page()
        pdf.chapter_title("Methodology")
        
        methodology_text = "The analysis followed these steps:\n\n"
        methodology_text += "1. Data Collection: Time series data was collected from battery systems.\n"
        methodology_text += "2. Data Cleaning: Missing values were handled, data types were corrected, and duplicates were removed.\n"
        methodology_text += "3. Transformation: Hourly aggregations were calculated and metrics were derived.\n"
        methodology_text += "4. Visualization: Multiple chart types were generated to visualize different aspects of the data.\n"
        methodology_text += "5. Analysis: Patterns and insights were identified from the visualizations.\n\n"
        
        methodology_text += "The analysis focuses on two key metrics:\n"
        methodology_text += "- Grid Purchase: Energy drawn from the grid by the battery systems.\n"
        methodology_text += "- Grid Feed-in: Energy returned to the grid from the battery systems.\n\n"
        
        methodology_text += "These metrics help understand the bidirectional energy flow between the batteries and the power grid."
        
        pdf.chapter_body(methodology_text)
        
        # Conclusion
        pdf.chapter_title("Conclusion")
        
        conclusion_text = "The battery data analysis reveals important patterns in energy flow between battery systems and the power grid. "
        conclusion_text += "Understanding these patterns can help optimize battery utilization, reduce costs, and improve grid stability.\n\n"
        conclusion_text += "Key takeaways include:\n\n"
        conclusion_text += "- Daily patterns in grid interaction suggest opportunities for optimization.\n"
        conclusion_text += "- Variations across batteries indicate different usage patterns or efficiencies.\n"
        conclusion_text += "- Grid feed-in activity shows potential for energy contribution back to the grid.\n\n"
        
        conclusion_text += "Further analysis could explore seasonal variations, correlate with external factors like weather, "
        conclusion_text += "and develop predictive models for battery behavior."
        
        pdf.chapter_body(conclusion_text)
        
        # Save the PDF
        try:
            # Ensure output directory exists
            os.makedirs(os.path.dirname(self.output_file), exist_ok=True)
            
            # Save the PDF
            pdf.output(self.output_file)
            logger.info(f"Successfully generated PDF report: {self.output_file}")
            return True
        except Exception as e:
            logger.error(f"Error saving PDF report: {str(e)}")
            return False


if __name__ == "__main__":
    # Initialize and run the report generator
    generator = BatteryReportGenerator()
    success = generator.create_report()
    
    # Exit with appropriate status code
    sys.exit(0 if success else 1)